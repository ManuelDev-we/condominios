<?php
/**
 * üß™ Test de Integraci√≥n Completa: RateLimiter + MiddlewareAutoloader PSR-4
 * 
 * Test que combina ambos middlewares verificando:
 * - AutoLoader carga RateLimiter din√°micamente v√≠a PSR-4
 * - RateLimiter protege las operaciones del AutoLoader
 * - Manejo integrado de solicitudes PSR-4 bajo protecci√≥n de rate limiting
 * - Detecci√≥n de bots que intentan sobrecargar el sistema de autoload
 * - Logs integrados de ambos componentes
 * - Rendimiento conjunto bajo carga
 * 
 * @author ManuelDev
 * @version 1.0
 * @since 2025-09-23
 */

// Configurar entorno de testing
error_reporting(E_ALL);
ini_set('display_errors', 1);
set_time_limit(120);

echo "üß™ =====================================================\n";
echo "   TEST INTEGRACI√ìN RATELIMITER + AUTOLOADER PSR-4\n";
echo "   Verificaci√≥n de manejo conjunto de solicitudes\n";
echo "üß™ =====================================================\n\n";

try {
    // 1. INICIALIZAR AMBOS SISTEMAS
    echo "1Ô∏è‚É£ Inicializando sistemas de seguridad integrados...\n";
    
    // Cargar AutoLoader
    require_once __DIR__ . '/middlewares/Security/AutoLoader.php';
    $autoloader = MiddlewareAutoloader::getInstance();
    echo "   ‚úÖ MiddlewareAutoloader inicializado\n";
    
    // Cargar RateLimiter usando el AutoLoader
    echo "   üì¶ Cargando RateLimiter v√≠a AutoLoader PSR-4... ";
    $rateLimiterLoaded = $autoloader->loadClass('RateLimiter');
    
    if ($rateLimiterLoaded && class_exists('RateLimiter')) {
        echo "‚úÖ √âXITO\n";
        
        // Configurar RateLimiter para integraci√≥n
        $rateLimiter = new RateLimiter([
            'rate_limiting' => [
                'enabled' => true,
                'default_limit' => 15,      // 15 requests por minuto
                'window_seconds' => 60,
                'burst_limit' => 8,         // M√°ximo 8 requests en 10 segundos
                'burst_window' => 10,
            ],
            'bot_detection' => [
                'enabled' => true,
                'suspicious_patterns' => [
                    'rapid_requests' => 5,
                    'automated_tools' => ['curl', 'wget', 'python'],
                ]
            ],
            'logging' => [
                'enabled' => true,
                'log_path' => 'logs/integration_test.log'
            ]
        ]);
        
        echo "   ‚úÖ RateLimiter configurado para integraci√≥n\n";
    } else {
        throw new Exception("‚ùå No se pudo cargar RateLimiter v√≠a AutoLoader");
    }
    echo "\n";
    
    // 2. TEST DE CARGA PROTEGIDA DE MIDDLEWARES
    echo "2Ô∏è‚É£ Testing carga protegida de middlewares...\n";
    
    $protectedLoadTests = [
        'GeoFirewall',
        'InputSanitizer', 
        'CsrfProtection',
        'IpWhitelist'
    ];
    
    $protectedResults = [];
    
    foreach ($protectedLoadTests as $middleware) {
        echo "   üõ°Ô∏è Cargando '$middleware' con protecci√≥n RateLimiter... ";
        
        // Configurar request simulado
        $_SERVER['REQUEST_METHOD'] = 'GET';
        $_SERVER['REQUEST_URI'] = "/api/protected/load/$middleware";
        $_SERVER['HTTP_USER_AGENT'] = 'PSR-4-Protected-Client/1.0';
        $_SERVER['REMOTE_ADDR'] = '192.168.100.' . (mt_rand(10, 99));
        
        // 1. Verificar l√≠mites ANTES de cargar
        $rateLimitCheck = $rateLimiter->checkLimits();
        
        if ($rateLimitCheck['allowed']) {
            // 2. Si est√° permitido, proceder con la carga
            $loadResult = $autoloader->loadClass($middleware);
            
            if ($loadResult) {
                echo "‚úÖ CARGADO (protegido)";
                $protectedResults[$middleware] = ['status' => 'loaded', 'protected' => true];
            } else {
                echo "‚ö†Ô∏è FALL√ì LA CARGA (protegido)";
                $protectedResults[$middleware] = ['status' => 'load_failed', 'protected' => true];
            }
        } else {
            echo "üö´ BLOQUEADO POR RATE LIMITER";
            $protectedResults[$middleware] = ['status' => 'rate_limited', 'protected' => true];
        }
        
        echo "\n";
        usleep(200000); // 0.2 segundos entre requests
    }
    
    $successfulProtectedLoads = array_filter($protectedResults, fn($r) => $r['status'] === 'loaded');
    echo "\n   üìä Cargas protegidas exitosas: " . count($successfulProtectedLoads) . "/" . count($protectedLoadTests) . "\n\n";
    
    // 3. TEST DE ATAQUE DE BOT CONTRA AUTOLOADER
    echo "3Ô∏è‚É£ Simulando ataque de bot contra el AutoLoader...\n";
    
    echo "   ü§ñ Simulando bot malicioso intentando sobrecargar autoloader...\n";
    
    $botAttackResults = [];
    
    // Configurar bot malicioso
    $_SERVER['HTTP_USER_AGENT'] = 'curl/7.68.0'; // User agent sospechoso
    $_SERVER['REMOTE_ADDR'] = '1.2.3.4'; // IP externa
    
    // Intentar cargar muchos middlewares r√°pidamente
    for ($i = 1; $i <= 12; $i++) {
        $middleware = $protectedLoadTests[($i - 1) % count($protectedLoadTests)];
        
        echo "      ‚ö° Ataque bot #$i - carga '$middleware'... ";
        
        $_SERVER['REQUEST_URI'] = "/api/bot-attack/load/$middleware/$i";
        
        // Verificar rate limiter
        $botRateCheck = $rateLimiter->checkLimits();
        
        if ($botRateCheck['allowed']) {
            $botLoadResult = $autoloader->loadClass($middleware);
            echo "‚ö†Ô∏è PERMITIDO";
            $botAttackResults[] = ['attempt' => $i, 'blocked' => false, 'loaded' => $botLoadResult];
        } else {
            echo "üö´ BLOQUEADO";
            $botAttackResults[] = ['attempt' => $i, 'blocked' => true, 'reason' => $botRateCheck['reason']];
        }
        
        echo "\n";
        usleep(50000); // 0.05 segundos - muy r√°pido para simular bot
    }
    
    $blockedBotAttempts = array_filter($botAttackResults, fn($r) => $r['blocked']);
    $botBlockingEffectiveness = round((count($blockedBotAttempts) / count($botAttackResults)) * 100, 2);
    
    echo "\n   üìä Intentos de bot bloqueados: " . count($blockedBotAttempts) . "/" . count($botAttackResults) . "\n";
    echo "   üõ°Ô∏è Efectividad anti-bot: $botBlockingEffectiveness%\n\n";
    
    // 4. TEST DE RECUPERACI√ìN DESPU√âS DEL ATAQUE
    echo "4Ô∏è‚É£ Testing recuperaci√≥n del sistema despu√©s del ataque...\n";
    
    echo "   üîÑ Esperando recuperaci√≥n del rate limiting...\n";
    sleep(2); // Esperar para que se resuelva el rate limiting
    
    // Cambiar a cliente leg√≠timo
    $_SERVER['HTTP_USER_AGENT'] = 'PSR-4-LegitimateClient/1.0';
    $_SERVER['REMOTE_ADDR'] = '192.168.1.50';
    
    echo "   üë§ Cliente leg√≠timo intentando cargar middleware despu√©s del ataque... ";
    
    $_SERVER['REQUEST_URI'] = '/api/recovery/load/GeoFirewall';
    $recoveryRateCheck = $rateLimiter->checkLimits();
    
    if ($recoveryRateCheck['allowed']) {
        $recoveryLoadResult = $autoloader->loadClass('GeoFirewall');
        
        if ($recoveryLoadResult) {
            echo "‚úÖ SISTEMA RECUPERADO";
        } else {
            echo "‚ö†Ô∏è CARGA FALL√ì PERO RATE LIMIT OK";
        }
    } else {
        echo "üö´ SISTEMA A√öN BLOQUEADO";
    }
    
    echo "\n\n";
    
    // 5. TEST DE RENDIMIENTO CONJUNTO
    echo "5Ô∏è‚É£ Testing rendimiento conjunto AutoLoader + RateLimiter...\n";
    
    $performanceTests = [];
    $startTime = microtime(true);
    
    // Configurar cliente de alto rendimiento
    $_SERVER['HTTP_USER_AGENT'] = 'PSR-4-HighPerformance/1.0';
    
    for ($i = 1; $i <= 10; $i++) {
        $testIP = '10.1.1.' . $i;
        $_SERVER['REMOTE_ADDR'] = $testIP;
        $_SERVER['REQUEST_URI'] = "/api/performance/load/test$i";
        
        $testStartTime = microtime(true);
        
        // Secuencia: RateLimiter -> AutoLoader
        $rateCheck = $rateLimiter->checkLimits();
        
        if ($rateCheck['allowed']) {
            $loadResult = $autoloader->loadClass('RateLimiter'); // Self-load test
            $success = $loadResult ? 'loaded' : 'load_failed';
        } else {
            $success = 'rate_limited';
        }
        
        $testTime = (microtime(true) - $testStartTime) * 1000; // en ms
        
        $performanceTests[] = [
            'test' => $i,
            'ip' => $testIP,
            'result' => $success,
            'time_ms' => round($testTime, 3)
        ];
        
        usleep(100000); // 0.1 segundo entre tests
    }
    
    $totalPerformanceTime = (microtime(true) - $startTime) * 1000;
    $successfulPerformanceTests = array_filter($performanceTests, fn($t) => $t['result'] === 'loaded');
    $averagePerformanceTime = array_sum(array_column($performanceTests, 'time_ms')) / count($performanceTests);
    
    echo "   üìä Tests de rendimiento exitosos: " . count($successfulPerformanceTests) . "/10\n";
    echo "   ‚è±Ô∏è Tiempo total: " . round($totalPerformanceTime, 2) . "ms\n";
    echo "   ‚è±Ô∏è Tiempo promedio por operaci√≥n: " . round($averagePerformanceTime, 3) . "ms\n\n";
    
    // 6. VERIFICAR LOGS INTEGRADOS
    echo "6Ô∏è‚É£ Verificando logs integrados de seguridad...\n";
    
    $integrationLogPath = 'logs/integration_test.log';
    
    if (file_exists($integrationLogPath)) {
        $logSize = filesize($integrationLogPath);
        $logLines = count(file($integrationLogPath));
        
        echo "   üìù Log de integraci√≥n: $integrationLogPath\n";
        echo "   üìä Tama√±o: $logSize bytes, $logLines entradas\n";
        
        // Contar tipos de eventos en el log
        $logContent = file_get_contents($integrationLogPath);
        $botDetections = substr_count($logContent, 'bot detectado');
        $rateLimits = substr_count($logContent, 'rate limit');
        $blockedRequests = substr_count($logContent, 'bloqueado');
        
        echo "   ü§ñ Detecciones de bot en log: $botDetections\n";
        echo "   üö´ Rate limits aplicados: $rateLimits\n";
        echo "   üõ°Ô∏è Requests bloqueados: $blockedRequests\n";
    } else {
        echo "   ‚ö†Ô∏è Log de integraci√≥n no encontrado\n";
    }
    
    // 7. ESTAD√çSTICAS FINALES DE INTEGRACI√ìN
    echo "\n7Ô∏è‚É£ Estad√≠sticas finales de la integraci√≥n...\n";
    
    $totalIntegrationTests = count($protectedLoadTests) + count($botAttackResults) + count($performanceTests) + 1; // +1 para recovery
    $totalSuccesses = count($successfulProtectedLoads) + count($blockedBotAttempts) + count($successfulPerformanceTests) + 1; // Recovery tambi√©n cuenta como √©xito si est√° OK
    
    $integrationEffectiveness = round(($totalSuccesses / $totalIntegrationTests) * 100, 2);
    
    echo "   üìä Tests totales ejecutados: $totalIntegrationTests\n";
    echo "   ‚úÖ Cargas protegidas exitosas: " . count($successfulProtectedLoads) . "\n";
    echo "   üõ°Ô∏è Ataques de bot bloqueados: " . count($blockedBotAttempts) . " ($botBlockingEffectiveness%)\n";
    echo "   ‚ö° Tests de rendimiento exitosos: " . count($successfulPerformanceTests) . "\n";
    echo "   üìà Efectividad de integraci√≥n: $integrationEffectiveness%\n";
    echo "   ‚è±Ô∏è Rendimiento promedio integrado: " . round($averagePerformanceTime, 3) . "ms\n";
    
    echo "\n‚úÖ =====================================================\n";
    echo "   INTEGRACI√ìN RATELIMITER + AUTOLOADER EXITOSA\n";
    echo "   ‚úì AutoLoader carga RateLimiter din√°micamente\n";
    echo "   ‚úì RateLimiter protege operaciones del AutoLoader\n";
    echo "   ‚úì Detecci√≥n efectiva de ataques de bot\n";
    echo "   ‚úì Sistema de recuperaci√≥n funcional\n";
    echo "   ‚úì Rendimiento conjunto optimizado\n";
    echo "   ‚úì Logs integrados operativos\n";
    echo "‚úÖ =====================================================\n";
    
    echo "\nüéØ CONCLUSI√ìN: Los middlewares PSR-4 manejan correctamente\n";
    echo "   las solicitudes integradas con excelente rendimiento\n";
    echo "   y protecci√≥n de seguridad robusta.\n";
    
} catch (Exception $e) {
    echo "\n‚ùå ERROR EN TEST DE INTEGRACI√ìN:\n";
    echo "   Mensaje: " . $e->getMessage() . "\n";
    echo "   Archivo: " . $e->getFile() . "\n";
    echo "   L√≠nea: " . $e->getLine() . "\n";
    
    echo "\nüîß Verificar:\n";
    echo "   - Ambos middlewares est√°n disponibles\n";
    echo "   - Configuraci√≥n PSR-4 es correcta\n";
    echo "   - Permisos de escritura en logs/\n";
    echo "   - No hay conflictos entre componentes\n";
    
    exit(1);
}

?>