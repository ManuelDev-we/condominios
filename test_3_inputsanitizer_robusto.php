<?php
/**
 * üßπ TEST ROBUSTO INPUTSANITIZER
 * 
 * Test exhaustivo de middlewares/Security/InputSanitizer.php
 * Verificando filtrado de c√≥digo malicioso y amenazas de seguridad
 * 
 * @version 1.0
 * @date 2025-09-22
 */

echo "üßπ ===== TEST ROBUSTO INPUTSANITIZER =====\n\n";

// Verificar existencia de archivos
$inputSanitizerPath = 'middlewares/Security/InputSanitizer.php';
$filtersPath = 'helpers/filters.php';

if (!file_exists($inputSanitizerPath)) {
    echo "‚ùå ERROR: No se encuentra $inputSanitizerPath\n";
    exit(1);
}

if (!file_exists($filtersPath)) {
    echo "‚ùå ERROR: No se encuentra $filtersPath\n";
    exit(1);
}

// Cargar dependencias
echo "üìÅ Cargando helpers/filters.php...\n";
require_once $filtersPath;

echo "üìÅ Cargando InputSanitizer...\n";
require_once $inputSanitizerPath;

$testsPasados = 0;
$totalTests = 0;

function ejecutarTest($nombre, $callback) {
    global $testsPasados, $totalTests;
    $totalTests++;
    
    echo "üß™ Test: $nombre\n";
    
    try {
        $resultado = $callback();
        if ($resultado) {
            echo "   ‚úÖ PAS√ì\n";
            $testsPasados++;
        } else {
            echo "   ‚ùå FALL√ì\n";
        }
    } catch (Exception $e) {
        echo "   ‚ùå ERROR: " . $e->getMessage() . "\n";
    }
    
    echo "\n";
}

// ============================
// TESTS B√ÅSICOS DE INPUTSANITIZER
// ============================

echo "üìã Iniciando tests b√°sicos de InputSanitizer...\n\n";

// Test 1: Instanciaci√≥n b√°sica
ejecutarTest("Instanciaci√≥n b√°sica de InputSanitizer", function() {
    $sanitizer = new InputSanitizer();
    return $sanitizer instanceof InputSanitizer;
});

// Test 2: Instanciaci√≥n con configuraci√≥n
ejecutarTest("Instanciaci√≥n con configuraci√≥n personalizada", function() {
    $config = [
        'input_sanitization' => [
            'strict_mode' => true,
            'xss_protection' => true
        ]
    ];
    $sanitizer = new InputSanitizer($config);
    return $sanitizer instanceof InputSanitizer;
});

// Test 3: M√©todo sanitizeInput b√°sico
ejecutarTest("M√©todo sanitizeInput con texto normal", function() {
    $sanitizer = new InputSanitizer();
    $result = $sanitizer->sanitizeInput("Texto normal sin amenazas");
    return is_array($result) && isset($result['is_safe']) && isset($result['filtered']);
});

// Test 4: Verificar m√©todo isInputSafe
ejecutarTest("M√©todo isInputSafe", function() {
    $sanitizer = new InputSanitizer();
    $result = $sanitizer->isInputSafe("Texto seguro");
    return is_bool($result);
});

// Test 5: M√©todo quickSanitize
ejecutarTest("M√©todo quickSanitize", function() {
    $sanitizer = new InputSanitizer();
    $result = $sanitizer->quickSanitize("Texto para sanitizar", 'string');
    return is_string($result) || is_array($result);
});

// ============================
// TESTS DE C√ìDIGO MALICIOSO
// ============================

echo "üö® ===== TESTS DE C√ìDIGO MALICIOSO =====\n\n";

// Test 6: Detecci√≥n de JavaScript malicioso
ejecutarTest("Detecci√≥n de JavaScript malicioso", function() {
    $sanitizer = new InputSanitizer();
    $maliciousJS = "<script>alert('XSS');</script>";
    $result = $sanitizer->sanitizeInput($maliciousJS);
    
    // Debe detectar como no seguro y filtrar el script
    return $result['is_safe'] === false && 
           strpos($result['filtered'], '<script>') === false;
});

// Test 7: Detecci√≥n de inyecci√≥n SQL
ejecutarTest("Detecci√≥n de inyecci√≥n SQL", function() {
    $sanitizer = new InputSanitizer();
    $maliciousSQL = "'; DROP TABLE users; --";
    $result = $sanitizer->sanitizeInput($maliciousSQL);
    
    // Debe detectar como amenaza SQL
    return $result['is_safe'] === false && 
           isset($result['threats_detected']) &&
           is_array($result['threats_detected']);
});

// Test 8: Detecci√≥n de PHP injection
ejecutarTest("Detecci√≥n de PHP injection", function() {
    $sanitizer = new InputSanitizer();
    $maliciousPHP = "<?php system('rm -rf /'); ?>";
    $result = $sanitizer->sanitizeInput($maliciousPHP);
    
    // Debe detectar como amenaza PHP
    return $result['is_safe'] === false;
});

// Test 9: Detecci√≥n de File Inclusion
ejecutarTest("Detecci√≥n de File Inclusion", function() {
    $sanitizer = new InputSanitizer();
    $maliciousInclude = "../../../etc/passwd";
    $result = $sanitizer->sanitizeInput($maliciousInclude);
    
    // Debe detectar directory traversal
    return is_array($result) && isset($result['is_safe']);
});

// Test 10: Detecci√≥n de Event Handlers XSS
ejecutarTest("Detecci√≥n de Event Handlers XSS", function() {
    $sanitizer = new InputSanitizer();
    $maliciousEvent = '<img src="x" onerror="alert(1)">';
    $result = $sanitizer->sanitizeInput($maliciousEvent);
    
    return $result['is_safe'] === false;
});

// ============================
// TESTS DE ARRAYS Y DATOS COMPLEJOS
// ============================

echo "üìä ===== TESTS DE ARRAYS Y DATOS COMPLEJOS =====\n\n";

// Test 11: Sanitizaci√≥n de arrays
ejecutarTest("Sanitizaci√≥n de arrays", function() {
    $sanitizer = new InputSanitizer();
    $arrayData = [
        'nombre' => 'Juan',
        'email' => 'juan@test.com',
        'comentario' => '<script>alert("XSS")</script>'
    ];
    $result = $sanitizer->sanitizeInput($arrayData);
    
    return is_array($result) && isset($result['is_safe']) && is_array($result['filtered']);
});

// Test 12: Arrays anidados
ejecutarTest("Arrays anidados con amenazas", function() {
    $sanitizer = new InputSanitizer();
    $nestedArray = [
        'usuario' => [
            'nombre' => 'Test',
            'sql_injection' => "'; DROP TABLE users; --",
            'xss' => '<script>evil()</script>'
        ]
    ];
    $result = $sanitizer->sanitizeInput($nestedArray);
    
    return is_array($result) && $result['is_safe'] === false;
});

// Test 13: Validaci√≥n por lotes
ejecutarTest("Validaci√≥n por lotes (validateBatch)", function() {
    $sanitizer = new InputSanitizer();
    $inputs = [
        'safe_input' => 'Texto seguro',
        'malicious_input' => '<script>alert(1)</script>',
        'sql_input' => "'; DROP TABLE users; --"
    ];
    $result = $sanitizer->validateBatch($inputs);
    
    return is_array($result) && count($result) === 3;
});

// ============================
// TESTS DE CARACTER√çSTICAS AVANZADAS
// ============================

echo "‚ö° ===== TESTS DE CARACTER√çSTICAS AVANZADAS =====\n\n";

// Test 14: Estad√≠sticas de sanitizaci√≥n
ejecutarTest("Obtener estad√≠sticas", function() {
    $sanitizer = new InputSanitizer();
    
    // Ejecutar algunas sanitizaciones para generar estad√≠sticas
    $sanitizer->sanitizeInput("Texto normal");
    $sanitizer->sanitizeInput("<script>alert('test')</script>");
    
    $stats = $sanitizer->getStats();
    return is_array($stats) && isset($stats['total_processed']);
});

// Test 15: Reporte de seguridad
ejecutarTest("Generar reporte de seguridad", function() {
    $sanitizer = new InputSanitizer();
    
    // Procesar algunos inputs para generar datos
    $sanitizer->sanitizeInput("<script>alert('test')</script>");
    $sanitizer->sanitizeInput("'; DROP TABLE users; --");
    
    $report = $sanitizer->generateSecurityReport();
    return is_array($report) && isset($report['summary']);
});

// Test 16: Configuraci√≥n estricta
ejecutarTest("Modo estricto habilitado", function() {
    $config = [
        'input_sanitization' => [
            'strict_mode' => true,
            'max_input_length' => 100
        ]
    ];
    $sanitizer = new InputSanitizer($config);
    
    $longInput = str_repeat("A", 200); // String muy largo
    $result = $sanitizer->sanitizeInput($longInput);
    
    return is_array($result) && isset($result['is_safe']);
});

// ============================
// TESTS DE INTEGRACI√ìN CON HELPERS
// ============================

echo "üîó ===== TESTS DE INTEGRACI√ìN CON HELPERS =====\n\n";

// Test 17: Verificar uso de SecurityFilters
ejecutarTest("Integraci√≥n con SecurityFilters de helpers", function() {
    // Verificar que SecurityFilters est√° disponible
    if (!class_exists('SecurityFilters')) {
        return false;
    }
    
    $sanitizer = new InputSanitizer();
    $maliciousInput = "<script>alert('XSS')</script>";
    $result = $sanitizer->sanitizeInput($maliciousInput);
    
    // El resultado debe mostrar que se usaron los filtros
    return $result['is_safe'] === false;
});

// Test 18: Comparaci√≥n con filtros directos
ejecutarTest("Comparaci√≥n con SecurityFilters directo", function() {
    if (!class_exists('SecurityFilters')) {
        return false;
    }
    
    $filters = new SecurityFilters();
    $sanitizer = new InputSanitizer();
    
    $testInput = "<script>alert('test')</script>";
    
    // Ambos deben detectar la amenaza
    $directFilter = $filters->filterInput($testInput, true);
    $sanitizerResult = $sanitizer->sanitizeInput($testInput);
    
    return $directFilter['is_safe'] === false && $sanitizerResult['is_safe'] === false;
});

// ============================
// TESTS DE CASOS EXTREMOS
// ============================

echo "üéØ ===== TESTS DE CASOS EXTREMOS =====\n\n";

// Test 19: Input vac√≠o
ejecutarTest("Manejo de input vac√≠o", function() {
    $sanitizer = new InputSanitizer();
    $result = $sanitizer->sanitizeInput("");
    return is_array($result) && isset($result['is_safe']);
});

// Test 20: Input null
ejecutarTest("Manejo de input null", function() {
    $sanitizer = new InputSanitizer();
    $result = $sanitizer->sanitizeInput(null);
    return is_array($result) && isset($result['is_safe']);
});

// Test 21: N√∫meros y tipos no string
ejecutarTest("Manejo de n√∫meros y tipos no string", function() {
    $sanitizer = new InputSanitizer();
    $result = $sanitizer->sanitizeInput(12345);
    return is_array($result) && isset($result['is_safe']);
});

// Test 22: Caracteres especiales Unicode
ejecutarTest("Caracteres especiales Unicode", function() {
    $sanitizer = new InputSanitizer();
    $unicodeInput = "Caf√© üè† Œ± Œ≤ Œ≥";
    $result = $sanitizer->sanitizeInput($unicodeInput);
    return is_array($result) && $result['is_safe'] === true;
});

// ============================
// RESUMEN DE RESULTADOS
// ============================

echo "üéØ ===== RESUMEN DE TESTS INPUTSANITIZER =====\n";
echo "Tests ejecutados: $totalTests\n";
echo "Tests pasados: $testsPasados\n";
echo "Tests fallidos: " . ($totalTests - $testsPasados) . "\n";
echo "Porcentaje de √©xito: " . number_format(($testsPasados / $totalTests) * 100, 2) . "%\n\n";

if ($testsPasados === $totalTests) {
    echo "üéâ ¬°TODOS LOS TESTS DE INPUTSANITIZER PASARON!\n";
    echo "‚úÖ InputSanitizer est√° funcionando correctamente\n";
    echo "‚úÖ Filtrado de c√≥digo malicioso verificado\n";
    echo "‚úÖ Integraci√≥n con helpers/filters.php confirmada\n\n";
} else {
    echo "‚ö†Ô∏è Algunos tests fallaron. Revisar implementaci√≥n.\n\n";
}

// Informaci√≥n adicional del sistema
echo "üìä ===== INFORMACI√ìN DEL SISTEMA =====\n";
if (class_exists('InputSanitizer')) {
    $sanitizer = new InputSanitizer();
    
    echo "üßπ Clase InputSanitizer: ‚úÖ Cargada\n";
    echo "üìã M√©todos disponibles: " . count(get_class_methods($sanitizer)) . "\n";
    
    if (class_exists('SecurityFilters')) {
        echo "üîó SecurityFilters: ‚úÖ Disponible\n";
    } else {
        echo "üîó SecurityFilters: ‚ùå No disponible\n";
    }
    
    // Mostrar estad√≠sticas finales
    try {
        $stats = $sanitizer->getStats();
        echo "üìà Estad√≠sticas finales: ‚úÖ Disponibles\n";
    } catch (Exception $e) {
        echo "üìà Estad√≠sticas: ‚ùå " . $e->getMessage() . "\n";
    }
}

echo "\nüßπ ===== FIN TEST ROBUSTO INPUTSANITIZER =====\n";
?>